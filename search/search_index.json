{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"web/","title":"Fastapi\u5f00\u53d1","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b\u7684\u793a\u4f8b\u9879\u76ee\uff0c\u65e8\u5728\u901a\u8fc7\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5305\u542b\u4e3b\u8981\u77e5\u8bc6\u70b9\u7684\u7b80\u5355\u9879\u76ee\uff0c\u6765\u5411\u4f7f\u7528\u8005\u5c55\u793a\u4e00\u4e2a\u66f4 Python \u5316\u7684\u9879\u76ee\u5f00\u53d1\u6d41\u7a0b\u3002</p> <p>\u793a\u4f8b\u9879\u76ee\u662f\u4e00\u4e2a\u4f7f\u7528\u5f02\u6b65\u5fae Web \u6846\u67b6 Fastapi \u5f00\u53d1\u7684\u535a\u5ba2\u7cfb\u7edf\u3002\u9879\u76ee\u4e1a\u52a1\u529f\u80fd\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u5b8c\u6574\u4f53\u73b0\u4e86\u4e00\u4e2a\u9879\u76ee\u4ece\u73af\u5883\u642d\u5efa\uff0c\u5230\u5f00\u53d1\uff0c\u6700\u540e\u6d4b\u8bd5\u53d1\u5e03\u7684\u5b8c\u6574\u6d41\u7a0b\u3002</p>"},{"location":"web/#1","title":"1. \u5f00\u53d1\u73af\u5883\u642d\u5efa","text":""},{"location":"web/#11-python","title":"1.1 Python \u73af\u5883","text":"<p>\u9274\u4e8e\u5b98\u65b9\u5df2\u7ecf\u505c\u6b62\u5bf9 Python 2 \u7684\u652f\u6301 ^1 \uff0c\u6211\u4eec\u4e0d\u63a8\u8350\u518d\u4f7f\u7528 Python 2 \u8fdb\u884c\u5f00\u53d1\u3002\u6839\u636e\u5f53\u524d Python \u7248\u672c\u4f7f\u7528\u60c5\u51b5\uff0c\u63a8\u8350\u4f7f\u7528 Python 3.7+ \u3002</p> <p>\u5177\u4f53\u7684\u7248\u672c\u7684 Python \u73af\u5883\u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0b\u8f7d\u3002\u4e3a\u4e86\u4f7f\u7528\u4fbf\u5229\u6027\uff0c\u53ef\u4ee5\u9009\u62e9 Anaconda [^2] \u3002</p>"},{"location":"web/#12","title":"1.2 \u5f00\u53d1\u5de5\u5177","text":"<p>\u63a8\u8350\u4f7f\u7528 Pycharm \u4f5c\u4e3a\u4e3b\u8981\u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u9009\u62e9\u793e\u533a\u7248\u672c\u514d\u8d39\u4f7f\u7528\u3002</p> <p>Visual Studio Code \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u514d\u8d39\u8f7b\u91cf\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u5b89\u88c5\u63d2\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6210\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684 IDE \u3002\u5728\u5bf9 Python \u7684\u652f\u6301\u4e0a\uff0c\u5df2\u7ecf\u6709\u4e86\u8f83\u4e3a\u5b8c\u5584\u7684\u63d2\u4ef6\u4f53\u7cfb\uff0c\u6b64\u65b9\u6848\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5907\u7528\u3002</p>"},{"location":"web/#13","title":"1.3 \u865a\u62df\u73af\u5883\u5de5\u5177","text":"<p>\u63a8\u8350\u4f7f\u7528 poetry\u3002poetry \u76f8\u6bd4\u4f7f\u7528 <code>requirements.txt</code> \u7ba1\u7406\u4f9d\u8d56\u5217\u8868\uff0c\u66f4\u52a0\u5f3a\u5927\u3002\u5b83\u652f\u6301\u540c\u65f6\u7ba1\u7406\u5f00\u53d1\u751f\u4ea7\u73af\u5883\u4f9d\u8d56\uff0c\u81ea\u52a8\u67e5\u627e\u865a\u62df\u73af\u5883\uff0c\u751f\u6210\u4f9d\u8d56\u9501\u5b9a\u6587\u4ef6\u7b49\u5176\u4ed6\u7279\u6027\u3002</p> <p>\u5728\u5b89\u88c5\u597d Python \u73af\u5883\u540e\uff0c\u5e94\u8be5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u5b89\u88c5 poetry \u3002</p>"},{"location":"web/#14-git","title":"1.4 Git \u4f7f\u7528","text":"<p>\u63a8\u8350\u4f7f\u7528 Git \u5bf9\u9879\u76ee\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3002\u6240\u4ee5\u9700\u8981\u63d0\u524d\u5b89\u88c5 Git \uff0c\u5e76\u719f\u6089\u5e38\u7528 Git \u7684\u6982\u5ff5\u548c\u5e38\u7528 Git \u547d\u4ee4\u3002</p>"},{"location":"web/#2","title":"2. \u9879\u76ee\u521d\u59cb\u5316","text":""},{"location":"web/#21","title":"2.1 \u521d\u59cb\u5316\u9879\u76ee\u7ed3\u6784","text":"<p>\u9879\u76ee\u7ed3\u6784\u91c7\u7528 <code>src</code> \u76ee\u5f55\u7ed3\u6784\uff0c\u8be6\u89c1 pypa/sampleproject \u3002</p> <p>\u521b\u5efa\u9879\u76ee\u76ee\u5f55\u7ed3\u6784\uff1a</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 example_blog\n\u2502       \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>\u521d\u59cb\u5316\u9879\u76ee\u865a\u62df\u73af\u5883\uff1a</p> <pre><code>poetry init\n</code></pre> <p>\u6839\u636e\u4ea4\u4e92\u5f0f\u63d0\u793a\uff0c\u8fdb\u884c\u76f8\u5e94\u5185\u5bb9\u9009\u53d6\u586b\u5199\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9879\u76ee\u76ee\u5f55\u4f1a\u81ea\u52a8\u751f\u6210 <code>pyproject.toml</code> \u6587\u4ef6\u3002</p>"},{"location":"web/#22","title":"2.2 \u521d\u59cb\u5316\u9879\u76ee\u57fa\u672c\u4fe1\u606f","text":"<p>\u7f16\u8f91 <code>pyproject.toml</code> \u6587\u4ef6\uff0c \u914d\u7f6e\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\uff1a</p> <pre><code>[tool.poetry]\nname = \"example_blog\"\nversion = \"0.1.0\"\ndescription = \"This is example blog system.\"\nauthors = [\"huagang517 &lt;huagang517@126.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre>"},{"location":"web/#23","title":"2.3 \u589e\u52a0\u9879\u76ee\u81ea\u8ff0\u6587\u4ef6","text":"<p>\u7f16\u5199 <code>README.md</code> \u6587\u4ef6</p> <pre><code># \u4e00\u4e2a\u7b80\u5355\u535a\u5ba2\u7cfb\u7edf\u793a\u4f8b.\n\n\u6b64\u9879\u76ee\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u535a\u5ba2\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e00\u4e9b\u7528\u6237\u7ba1\u7406\u548c\u535a\u5ba2\u6587\u7ae0\u7ba1\u7406\u3002\u76ee\u7684\u662f\u6f14\u793a\u5982\u4f55\u505a\u4e00\u4e2a\u66f4\u52a0 Pythonic \u7684\u9879\u76ee\u3002\n\n\u5982\u679c\u60a8\u6709\u4efb\u4f55\u610f\u89c1\u548c\u5efa\u8bae\uff0c\u6b22\u8fce\u5f00\u542f ISSUE \u53d1\u8d77\u8ba8\u8bba\u3002\u671f\u5f85\u4e0e\u60a8\u6253\u9020\u66f4\u52a0\u5b8c\u7f8e\u7684 Python \u793a\u4f8b\u3002\n\n## \u534f\u4f5c\u5f00\u53d1\n\n- Fork \u4ed3\u5e93\n- \u7f16\u5199\u4ee3\u7801\uff0c\u6d4b\u8bd5\uff0c\u63d0\u4ea4\n- \u53d1\u8d77 PR\n- \u5ba1\u6838\u901a\u8fc7\u540e\u5408\u5e76\uff0c\u534f\u4f5c\u5b8c\u6210\n\n</code></pre>"},{"location":"web/#24-gitignore","title":"2.4 \u589e\u52a0 <code>.gitignore</code>","text":"<pre><code># Created by .ignore support plugin (hsz.mobi)\n### Python template\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n### Windows template\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n### Linux template\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n### macOS template\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n.vscode\n.idea\n</code></pre>"},{"location":"web/#25","title":"2.5 \u5b89\u88c5\u5f00\u53d1\u5305","text":"<pre><code>poetry install \n</code></pre>"},{"location":"web/#26-git","title":"2.6 \u521d\u59cb Git \u63d0\u4ea4","text":"<pre><code>git init\ngit config user.name example\ngit config user.email example@example.com\ngit add .\ngit commit -m \"feat: First commit!\"\n</code></pre>"},{"location":"web/#3","title":"3. \u9879\u76ee\u529f\u80fd\u5f00\u53d1","text":""},{"location":"web/#31","title":"3.1 \u521b\u5efa\u547d\u4ee4\u884c\u5165\u53e3","text":"<p>\u547d\u4ee4\u884c\u5165\u53e3\u662f\u542f\u52a8\u9879\u76ee\u7684\u4e3b\u5165\u53e3\uff0c\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a <code>__main__</code> \u51fd\u6570\uff0c\u8c03\u7528\u542f\u52a8\u4ee3\u7801\uff0c\u7136\u540e\u4f7f\u7528 <code>python</code> \u547d\u4ee4\u542f\u52a8\u8be5\u6587\u4ef6\u3002\u4f46\u5bf9\u4e8e\u591a\u7ea7\u547d\u4ee4\u53c2\u6570\u7684\u60c5\u51b5\u5c31\u6bd4\u8f83\u9ebb\u70e6\uff0c\u63a8\u8350\u4f7f\u7528 click \u5de5\u5177\u7f16\u5199\u5165\u53e3\u903b\u8f91\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add click\n</code></pre> <p>\u67e5\u770b <code>pyproject.toml</code> \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>[tool.poetry.dependencies]\nclick = \"^8.1.3\"\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/cmdline.py</code> \u6587\u4ef6\uff1a</p> <pre><code>@click.group(invoke_without_command=True)\n@click.pass_context\n@click.option('-V', '--version', is_flag=True, help='Show version and exit.')\ndef main(ctx, version):\n    if version:\n        click.echo(__version__)\n    elif ctx.invoked_subcommand is None:\n        click.echo(ctx.get_help())\n\n</code></pre> <p>\u7f16\u8f91 <code>pyproject.toml</code> \uff0c\u5c06\u547d\u4ee4\u884c\u5165\u53e3\u6ce8\u518c\u5230\u9879\u76ee\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff1a</p> <pre><code>[tool.poetry.scripts]\nexample_blog = \"example_blog.cmdline:main\"\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"feat: Add cmdline.\"\n</code></pre>"},{"location":"web/#32","title":"3.2 \u5f15\u5165\u9879\u76ee\u914d\u7f6e\u7cfb\u7edf","text":"<p>\u9879\u76ee\u7684\u914d\u7f6e\u7cfb\u7edf\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u6838\u5fc3\u9a71\u52a8\uff0c\u4f7f\u7528\u914d\u7f6e\u7cfb\u7edf\u4fbf\u4e8e\u7ba1\u7406\u6563\u843d\u5728\u5404\u5904\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u4e5f\u65b9\u4fbf\u5728\u542f\u52a8\u524d\u901a\u8fc7\u8c03\u6574\u914d\u7f6e\uff0c\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002</p> <p>Dynaconf \u662f\u4e00\u4e2a\u9ad8\u5ea6\u7075\u6d3b\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\uff0c\u652f\u6301\u591a\u73af\u5883\u5206\u5c42\uff0c\u591a\u79cd\u914d\u7f6e\u5bfc\u5165\u7b49\u6709\u70b9\u3002\u5728\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528\u5982\u4e0b\u5b9e\u8df5\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add dynaconf\n</code></pre> <p>\u67e5\u770b <code>pyproject.toml</code> \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>[tool.poetry.dependencies]\nclick = \"^8.1.3\"\ndynaconf = \"^3.1.11\"\n</code></pre> <p>\u5efa\u7acb\u914d\u7f6e\u5305\uff0c\u548c\u914d\u7f6e\u6587\u4ef6\uff1a</p> <pre><code>mkdir src/example_blog/config\ntouch src/example_blog/config/__init__.py\ntouch src/example_blog/config/settings.yml\n</code></pre> <p>\u7f16\u8f91 <code>src/example_blog/config/__init__.py</code> \uff0c \u521d\u59cb\u5316\u5168\u5c40\u914d\u7f6e\u5bf9\u8c61\uff1a</p> <pre><code>import os\nimport sys\nfrom pathlib import Path\n\nfrom dynaconf import Dynaconf\n\n_BASE_DIR = Path(__file__).parent.parent\n\nsettings_files = [\n    Path(__file__).parent / 'settings.yml',\n]  # \u6307\u5b9a\u7edd\u5bf9\u8def\u5f84\u52a0\u8f7d\u9ed8\u8ba4\u914d\u7f6e\n\nsettings = Dynaconf(\n    envvar_prefix=\"EXAMPLE_BLOG\",  # \u73af\u5883\u53d8\u91cf\u524d\u7f00\u3002\u8bbe\u7f6e`EXAMPLE_BLOG_FOO='bar'`\uff0c\u4f7f\u7528`settings.FOO`\n    settings_files=settings_files,\n    environments=False,  # \u542f\u7528\u591a\u5c42\u6b21\u65e5\u5fd7\uff0c\u652f\u6301 dev, pro\n    load_dotenv=True,  # \u52a0\u8f7d .env\n    env_switcher=\"EXAMPLE_BLOG_ENV\",  # \u7528\u4e8e\u5207\u6362\u6a21\u5f0f\u7684\u73af\u5883\u53d8\u91cf\u540d\u79f0 EXAMPLE_BLOG_ENV=production\n    lowercase_read=False,  # \u7981\u7528\u5c0f\u5199\u8bbf\u95ee\uff0c settings.name \u662f\u4e0d\u5141\u8bb8\u7684\n    includes=[os.path.join(sys.prefix, 'etc', 'example_blog', 'settings.yml')],  # \u81ea\u5b9a\u4e49\u914d\u7f6e\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\n    base_dir=_BASE_DIR,  # \u7f16\u7801\u4f20\u5165\u914d\u7f6e\n)\n\n</code></pre> <p>\u7f16\u8f91 <code>src/example_blog/config/settings.yml</code> \uff0c\u521d\u59cb\u5316\u914d\u7f6e\uff1a</p> <pre><code>LOG_LEVEL: INFO\n</code></pre> <p>\u7f16\u8f91 <code>src/example_blog/config/settings.local.yml</code> \uff0c\u589e\u52a0\u672c\u5730\u5f00\u53d1\u914d\u7f6e\uff1a</p> <pre><code>LOG_LEVEL: DEBUG\n</code></pre> <p>\u6839\u636e Dynaconf \u89c4\u5219\uff0c <code>settings.local.yml</code> \u7684\u914d\u7f6e\u4e3a\u672c\u5730\u914d\u7f6e\uff0c\u4e14\u4f18\u5148\u7ea7\u6bd4 <code>settings.yml</code> \u4f4e\uff0c\u6240\u4ee5\u672c\u5730\u914d\u7f6e\u4f1a\u5728\u540e\u9762\u52a0\u8f7d\uff0c\u8986\u76d6\u4e4b\u524d\u7684\u914d\u7f6e\u3002</p> <p>\u7f16\u8f91 <code>.gitignore</code> \uff0c\u5c06\u6240\u6709\u672c\u5730\u914d\u7f6e\u6392\u9664\u7248\u672c\u63a7\u5236\u4e4b\u5916\u3002</p> <pre><code>**/settings.local.yml\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801:</p> <pre><code>git add .\ngit commit -m \"feat: Add config.\"\n</code></pre>"},{"location":"web/#33","title":"3.3 \u5f15\u5165\u65e5\u5fd7","text":"<p>\u521b\u5efa <code>src/example_blog/log.py</code> \uff0c\u521d\u59cb\u5316 log \uff1a</p> <pre><code>from logging.config import dictConfig\n\nfrom example_blog.config import settings\n\n\ndef init_log():\n    log_config = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'sample': {'format': '%(asctime)s %(levelname)s %(message)s'},\n            'verbose': {'format': '%(asctime)s %(levelname)s %(name)s %(process)d %(thread)d %(message)s'},\n            \"access\": {\n                \"()\": \"uvicorn.logging.AccessFormatter\",\n                \"fmt\": '%(asctime)s %(levelprefix)s %(client_addr)s - \"%(request_line)s\" %(status_code)s',\n            },\n        },\n        'handlers': {\n            \"console\": {\n                \"formatter\": 'verbose',\n                'level': 'DEBUG',\n                \"class\": \"logging.StreamHandler\",\n            },\n        },\n        'loggers': {\n            '': {'level': settings.LOG_LEVEL, 'handlers': ['console']},\n        },\n    }\n\n    dictConfig(log_config)\n\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"feat: Add log\"\n</code></pre>"},{"location":"web/#34","title":"3.4 \u6570\u636e\u8bbf\u95ee","text":"<p>\u6570\u636e\u5c42\u662f\u5e94\u7528\u7684\u6700\u5e95\u5c42\uff0c\u548c\u6570\u636e\u5b58\u50a8\u6253\u4ea4\u9053\u3002\u4f7f\u7528 sqlalchemy \u4f5c\u5e95\u5c42\u6570\u636e\u6a21\u578b\u5efa\u6a21\u548c\u6570\u636e\u8bbf\u95ee\u64cd\u4f5c\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add sqlalchemy mysqlclient\n</code></pre> <p>\u67e5\u770b <code>pyproject.toml</code> \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>[tool.poetry.dependencies]\nclick = \"^8.1.3\"\ndynaconf = \"^3.1.11\"\nsqlalchemy = \"^1.4.44\"\nmysqlclient = \"^2.1.1\"\n</code></pre> <p>\u7f16\u5199 <code>src/example_blog/config/settings.yml</code> \uff0c\u589e\u52a0\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f\uff1a</p> <pre><code># ######################################################################################################\n# # https://docs.sqlalchemy.org/en/13/core/engines.html\nDATABASE:\n  DRIVER: mysql\n  NAME: example_blog\n  HOST: 127.0.0.1\n  PORT: 3306\n  USERNAME: root\n  PASSWORD: root\n  QUERY:\n    charset: utf8mb4\n</code></pre> <p>!!! danger \"\u8b66\u544a\"     <code>settings.yml</code> \u4e3a\u7cfb\u7edf\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4f1a\u88ab git \u8ffd\u8e2a\u7ba1\u7406\uff0c\u4e0d\u8981\u586b\u5199\u771f\u6b63\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u3002\u771f\u5b9e\u914d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u5199\u5728 <code>settings.local.yml</code> \u6587\u4ef6\u4e2d\uff0c\u4f1a\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>\u65b0\u5efa <code>src/example_blog/db.py</code> \uff0c\u521b\u5efa sqlalchemy \u8bbf\u95ee\u5bf9\u8c61\uff1a</p> <pre><code>\"\"\"Database connections\"\"\"\n\nfrom sqlalchemy.engine import create_engine\nfrom sqlalchemy.engine.base import Engine\nfrom sqlalchemy.engine.url import URL\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nfrom example_blog.config import settings\n\nurl = URL(\n    drivername=settings.DATABASE.DRIVER,\n    username=settings.DATABASE.get('USERNAME', None),\n    password=settings.DATABASE.get('PASSWORD', None),\n    host=settings.DATABASE.get('HOST', None),\n    port=settings.DATABASE.get('PORT', None),\n    database=settings.DATABASE.get('NAME', None),\n    query=settings.DATABASE.get('QUERY', None),\n)\n\nengine: Engine = create_engine(url, echo=True)\n\nSessionFactory = sessionmaker(bind=engine, autocommit=False, autoflush=True)\n\nScopedSession = scoped_session(SessionFactory)\n\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/models.py</code> \uff0c\u521b\u5efa\u6570\u636e\u6a21\u578b\uff1a</p> <pre><code>\"\"\"Models\"\"\"\n\nfrom datetime import datetime\n\nfrom sqlalchemy import Column, DateTime, Integer, String, Text\nfrom sqlalchemy.ext.declarative import declarative_base, declared_attr\n\n\nclass CustomBase:\n    \"\"\"https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/mixins.html\"\"\"\n\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n\n    __table_args__ = {\n        'mysql_engine': 'InnoDB',\n        'mysql_collate': 'utf8mb4_general_ci'\n    }\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n\n\nBaseModel = declarative_base(cls=CustomBase)\n\n\nclass Article(BaseModel):\n    \"\"\"Article table\"\"\"\n    title = Column(String(500))\n    body = Column(Text(), nullable=True)\n    create_time = Column(DateTime, default=datetime.now, nullable=False)\n    update_time = Column(DateTime, default=datetime.now, onupdate=datetime.now, nullable=False)\n\n</code></pre> <p>\u4e3a\u4e86\u5728\u5e94\u7528\u4e2d\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u6570\u636e\u6a21\u578b\u5bf9\u8c61\uff0c\u5f15\u5165 pydantic \u6765\u5b9a\u4e49\u4e00\u4e9b\u5bf9\u8c61\u6a21\u578b\u7684\u57fa\u672c\u4fe1\u606f\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add pydantic\n</code></pre> <p>\u67e5\u770b <code>pyproject.toml</code> \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>[tool.poetry.dependencies]\nclick = \"^8.1.3\"\ndynaconf = \"^3.1.11\"\nsqlalchemy = \"^1.4.44\"\nmysqlclient = \"^2.1.1\"\npydantic = \"^1.10.2\"\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/schemas.py</code> \uff0c\u521b\u5efa\u5bf9\u8c61\u6a21\u578b\uff1a</p> <pre><code>from datetime import datetime\nfrom typing import Optional, TypeVar\n\nfrom pydantic import BaseModel, constr\n\nfrom example_blog.models import BaseModel as DBModel\n\nModelType = TypeVar('ModelType', bound=DBModel)\nCreateSchema = TypeVar('CreateSchema', bound=BaseModel)\nUpdateSchema = TypeVar('UpdateSchema', bound=BaseModel)\n\n\nclass InDBMixin(BaseModel):\n    id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass BaseArticle(BaseModel):\n    title: constr(max_length=500)\n    body: Optional[str] = None\n\n\nclass ArticleSchema(BaseArticle, InDBMixin):\n    create_time: datetime\n    update_time: datetime\n\n\nclass CreateArticleSchema(BaseArticle):\n    pass\n\n\nclass UpdateArticleSchema(BaseArticle):\n    title: Optional[constr(max_length=500)] = None\n\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/dao.py</code> \uff0c\u521b\u5efa\u6570\u636e\u8bbf\u95ee\u5c42\uff1a</p> <pre><code>from typing import Generic, List\n\nfrom fastapi.encoders import jsonable_encoder\nfrom sqlalchemy.orm import Session\n\nfrom example_blog.models import Article\nfrom example_blog.schemas import CreateSchema, ModelType, UpdateSchema, CreateArticleSchema, UpdateArticleSchema\n\n\nclass BaseDAO(Generic[ModelType, CreateSchema, UpdateSchema]):\n    model: ModelType\n\n    def get(self, session: Session, offset=0, limit=10) -&gt; List[ModelType]:\n        result = session.query(self.model).offset(offset).limit(limit).all()\n        return result\n\n    def get_by_id(self, session: Session, pk: int, ) -&gt; ModelType:\n        return session.query(self.model).get(pk)\n\n    def create(self, session: Session, obj_in: CreateSchema) -&gt; ModelType:\n        \"\"\"Create\"\"\"\n        obj = self.model(**jsonable_encoder(obj_in))\n        session.add(obj)\n        session.commit()\n        return obj\n\n    def patch(self, session: Session, pk: int, obj_in: UpdateSchema) -&gt; ModelType:\n        \"\"\"Patch\"\"\"\n        obj = self.get_by_id(session, pk)\n        update_data = obj_in.dict(exclude_unset=True)\n        for key, val in update_data.items():\n            setattr(obj, key, val)\n        session.add(obj)\n        session.commit()\n        session.refresh(obj)\n        return obj\n\n    def delete(self, session: Session, pk: int) -&gt; None:\n        \"\"\"Delete\"\"\"\n        obj = self.get_by_id(session, pk)\n        session.delete(obj)\n        session.commit()\n\n    def count(self, session: Session):\n        return session.query(self.model).count()\n\n\nclass ArticleDAO(BaseDAO[Article, CreateArticleSchema, UpdateArticleSchema]):\n    model = Article\n\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"feat: Add models and DAO\"\n</code></pre>"},{"location":"web/#35","title":"3.5 \u670d\u52a1\u5c42","text":"<p>\u521b\u5efa <code>src/example_blog/services.py</code> \uff0c\u521b\u5efa\u670d\u52a1\uff1a</p> <pre><code>\"\"\"Service\"\"\"\nfrom typing import Generic, List\n\nfrom sqlalchemy.orm import Session\n\nfrom example_blog.dao import ArticleDAO, BaseDAO\nfrom example_blog.models import Article\nfrom example_blog.schemas import CreateSchema, ModelType, UpdateSchema\n\n\nclass BaseService(Generic[ModelType, CreateSchema, UpdateSchema]):\n    dao: BaseDAO\n\n    def get(self, session: Session, offset=0, limit=10) -&gt; List[ModelType]:\n        \"\"\"\"\"\"\n        return self.dao.get(session, offset=offset, limit=limit)\n\n    def total(self, session: Session) -&gt; int:\n        return self.dao.count(session)\n\n    def get_by_id(self, session: Session, pk: int) -&gt; ModelType:\n        \"\"\"Get by id\"\"\"\n        return self.dao.get_by_id(session, pk)\n\n    def create(self, session: Session, obj_in: CreateSchema) -&gt; ModelType:\n        \"\"\"Create a object\"\"\"\n        return self.dao.create(session, obj_in)\n\n    def patch(self, session: Session, pk: int, obj_in: UpdateSchema) -&gt; ModelType:\n        \"\"\"Update\"\"\"\n        return self.dao.patch(session, pk, obj_in)\n\n    def delete(self, session: Session, pk: int) -&gt; None:\n        \"\"\"Delete a object\"\"\"\n        return self.dao.delete(session, pk)\n\n\nclass ArticleService(BaseService[Article, CreateSchema, UpdateSchema]):\n    dao = ArticleDAO()\n\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"feat: Add services.\"\n</code></pre>"},{"location":"web/#36-fastapi","title":"3.6 \u5f15\u5165 Fastapi","text":"<p>Fastapi \u662f\u4e00\u4e2a\u8f7b\u91cf\u7684 Web \u6846\u67b6\uff0c\u73b0\u5728\u5f15\u5165\uff0c\u4f7f\u5176\u4f5c\u4e3a API \u5c42</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add fastapi uvicorn\n</code></pre> <p>\u67e5\u770b <code>pyproject.toml</code> \uff0c\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>[tool.poetry.dependencies]\nclick = \"^8.1.3\"\ndynaconf = \"^3.1.11\"\nsqlalchemy = \"^1.4.44\"\nmysqlclient = \"^2.1.1\"\npydantic = \"^1.10.2\"\nfastapi = \"^0.88.0\"\nuvicorn = \"^0.20.0\"\n</code></pre> <p>\u521b\u5efa <code>src/examp.e_blog/views.py</code> \uff0c\u521b\u5efa\u89c6\u56fe\uff1a</p> <pre><code>from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\n\nfrom example_blog.dependencies import CommonQueryParams, get_db\nfrom example_blog.schemas import (ArticleSchema, CreateArticleSchema,\n                                  UpdateArticleSchema)\nfrom example_blog.services import ArticleService\n\nrouter = APIRouter()\n\n_service = ArticleService()\n\n\n@router.get('/articles')\ndef get(\n        session: Session = Depends(get_db),\n        commons: CommonQueryParams = Depends()\n):\n    return _service.get(session, offset=commons.offset, limit=commons.limit)\n\n\n@router.get('/articles/{pk}')\ndef get_by_id(\n        pk: int,\n        session: Session = Depends(get_db)\n):\n    return _service.get_by_id(session, pk)\n\n\n@router.post('/articles', response_model=ArticleSchema)\ndef create(\n        obj_in: CreateArticleSchema,\n        session: Session = Depends(get_db),\n):\n    return _service.create(session, obj_in)\n\n\n@router.patch('/articles/{pk}', response_model=ArticleSchema)\ndef patch(\n        pk: int,\n        obj_in: UpdateArticleSchema,\n        session: Session = Depends(get_db)\n):\n    return _service.patch(session, pk, obj_in)\n\n\n@router.delete('/articles/{pk}')\ndef delete(\n        pk: int,\n        session: Session = Depends(get_db)\n):\n    return _service.delete(session, pk)\n\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/middlewares.py</code> \uff0c\u521b\u5efa\u6570\u636e\u5e93\u4f1a\u8bdd\u4e2d\u95f4\u4ef6\uff1a</p> <pre><code>from typing import Callable\n\nfrom fastapi import FastAPI, Request, Response\n\nfrom example_blog.db import SessionFactory\n\n\nasync def db_session_middleware(request: Request, call_next: Callable) -&gt; Response:\n    response = Response('Internal server error', status_code=500)\n    try:\n        request.state.db = SessionFactory()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n\n    return response\n\n\ndef init_middleware(app: FastAPI) -&gt; None:\n    app.middleware('http')(db_session_middleware)\n\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/dependencies.py</code> \uff0c\u521b\u5efa Fastapi \u7684\u4f9d\u8d56\u9879\uff1a</p> <pre><code>from fastapi import Request\nfrom sqlalchemy.orm import Session\n\n\ndef get_db(request: Request) -&gt; Session:\n    return request.state.db\n\n\nclass CommonQueryParams:\n    def __init__(self, offset: int = 1, limit: int = 10):\n        self.offset = offset - 1\n        if self.offset &lt; 0:\n            self.offset = 0\n        self.limit = limit\n\n        if self.limit &lt; 0:\n            self.limit = 10\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/routes.py</code> \uff0c\u521b\u5efa\u8def\u7531\uff1a</p> <pre><code>from fastapi import APIRouter, FastAPI\n\nfrom example_blog import views\n\n\ndef router_v1():\n    router = APIRouter()\n    router.include_router(views.router, tags=['Article'])\n    return router\n\n\ndef init_routers(app: FastAPI):\n    app.include_router(router_v1(), prefix='/api/v1', tags=['v1'])\n\n</code></pre> <p>\u521b\u5efa <code>src/example_blog/server.py</code> \uff0c\u521b\u5efa\u670d\u52a1\u542f\u52a8\u903b\u8f91\uff1a</p> <pre><code>\"\"\"server\"\"\"\nimport uvicorn\nfrom fastapi import FastAPI\n\nfrom example_blog import middlewares, routes\nfrom example_blog.config import settings\nfrom example_blog.log import init_log\n\n\nclass Server:\n\n    def __init__(self):\n        init_log()\n        self.app = FastAPI()\n\n    def init_app(self):\n        middlewares.init_middleware(self.app)\n        routes.init_routers(self.app)\n\n    def run(self):\n        self.init_app()\n        uvicorn.run(\n            app=self.app,\n            host=settings.HOST,\n            port=settings.PORT,\n        )\n\n</code></pre> <p>\u4fee\u6539 <code>src/example_blog/config/settings.yml</code> \uff0c\u589e\u52a0\u670d\u52a1\u914d\u7f6e\uff1a</p> <pre><code>HOST: 127.0.0.1\nPORT: 8000\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"feat: Add api service.\"\n</code></pre>"},{"location":"web/#37","title":"3.7 \u7f16\u5199\u542f\u52a8\u547d\u4ee4","text":"<p>\u7f16\u8f91 <code>src/example_blog/cmdline.py</code> \uff0c\u589e\u52a0\u542f\u52a8 Server \u903b\u8f91\uff1a</p> <pre><code>@main.command()\n@click.option('-h', '--host', show_default=True, help=f'Host IP. Default: {settings.HOST}')\n@click.option('-p', '--port', show_default=True, type=int, help=f'Port. Default: {settings.PORT}')\n@click.option('--level', help='Log level')\ndef server(host, port, level):\n    \"\"\"Start server.\"\"\"\n    kwargs = {\n        'LOGLEVEL': level,\n        'HOST': host,\n        'PORT': port,\n    }\n    for name, value in kwargs.items():\n        if value:\n            settings.set(name, value)\n\n    Server().run()\n\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"feat: Add server cmdline.\"\n</code></pre>"},{"location":"web/#38-server","title":"3.8 \u542f\u52a8 Server","text":"<p>\u5c06\u672c\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u5f53\u524d Python \u73af\u5883\uff1a</p> <pre><code>pip install -e .\n</code></pre> <p>\u547d\u4ee4\u884c\u8fd0\u884c\uff1a</p> <pre><code>example_blog server\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>INFO:     Started server process [21687]\n2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Started server process [21687]\nINFO:     Waiting for application startup.\n2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Waiting for application startup.\nINFO:     Application startup complete.\n2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/docs \u5373\u53ef\u67e5\u770b\u63a5\u53e3\u6587\u6863\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801</p>"},{"location":"web/#39","title":"3.9 \u5f15\u5165\u8fc1\u79fb\u5de5\u5177","text":"<p>\u4e3a\u4e86\u4fbf\u4e8e\u6570\u636e\u6a21\u578b\u53d8\u66f4\uff0c\u5f15\u5165 alembic \u505a\u6570\u636e\u5e93\u8fc1\u79fb\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add alembic\n</code></pre> <p>\u67e5\u770b <code>pyproject.toml</code> \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>[tool.poetry.dependencies]\nclick = \"^8.1.3\"\ndynaconf = \"^3.1.11\"\nsqlalchemy = \"^1.4.44\"\nmysqlclient = \"^2.1.1\"\npydantic = \"^1.10.2\"\nfastapi = \"^0.88.0\"\nuvicorn = \"^0.20.0\"\nalembic = \"^1.8.1\"\n</code></pre> <p>\u521d\u59cb\u5316 alembic \uff1a</p> <pre><code>alembic init migration\nmv alembic.ini src/example_blog/migration\n</code></pre> <p>\u5c06 alembic \u7684\u76f8\u5173\u6587\u4ef6\u5168\u90e8\u653e\u5230 <code>src/example_blog/migration</code> \u76ee\u5f55\u4e2d</p> <p>\u4fee\u6539 <code>src/example_blog/migration/alembic.ini</code> \uff1a</p> <pre><code># A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\n;script_location = src/example_blog/migration\nscript_location = .\n\n# template used to generate migration files\n# file_template = %%(rev)s_%%(slug)s\n\n# timezone to use when rendering the date\n# within the migration file as well as the filename.\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; this defaults\n# to src/example_blog/migration/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path\n# version_locations = %(here)s/bar %(here)s/bat src/example_blog/migration/versions\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\n;sqlalchemy.url = driver://user:pass@localhost/dbname\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks=black\n# black.type=console_scripts\n# black.entrypoint=black\n# black.options=-l 79\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n\n</code></pre> <p>\u4fee\u6539 <code>src/example_blog/migration/env.py</code> \uff1a</p> <pre><code>from logging.config import fileConfig\n\nfrom alembic import context\nfrom sqlalchemy import engine_from_config, pool\n\nfrom example_blog import db\nfrom example_blog.models import BaseModel\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\n# target_metadata = None\n\ntarget_metadata = BaseModel.metadata\n\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    context.configure(\n        url=db.url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    configuration = config.get_section(config.config_ini_section)\n    configuration['sqlalchemy.url'] = str(db.url)\n    connectable = engine_from_config(\n        configuration,\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n\n</code></pre> <p>\u7f16\u5199 <code>src/example_blog/cmdline.py</code> \uff0c\u521b\u5efa\u8fc1\u79fb\u547d\u4ee4\uff1a</p> <pre><code>from pathlib import Path\n\nfrom alembic import config\nfrom click import Context\n\n\n@main.command()\n@click.pass_context\n@click.option('-h', '--help', is_flag=True)\n@click.argument('args', nargs=-1)\ndef migrate(ctx: Context, help, args):\n    \"\"\"usage migrate -- arguments    \"\"\"\n    with utils.chdir(Path(__file__).parent / 'migration'):\n        argv = list(args)\n        if help:\n            argv.append('--help')\n        config.main(prog=ctx.command_path, argv=argv)\n\n</code></pre> <p>\u521b\u5efa <code>utils.py</code> \uff1a</p> <pre><code>\"\"\"Utils\"\"\"\n\nimport contextlib\nimport os\nfrom os import PathLike\nfrom typing import Union\n\n\n@contextlib.contextmanager\ndef chdir(path: Union[str, PathLike]):\n    cwd = os.getcwd()\n    os.chdir(path)\n    yield\n    os.chdir(cwd)\n\n</code></pre> <p>!!! info \"\u63d0\u793a\"     \u7531\u4e8e\u4f7f\u7528\u4e86 click \u5305\u88c5\u4e86 alembic \u547d\u4ee4\uff0c\u5728\u4f7f\u7528\u4e0a\u4f1a\u6709\u70b9\u4e0d\u540c\uff0c\u9ed8\u8ba4\u5e94\u8be5\u4f7f\u7528 <code>migrate --</code> \u540e\u52a0 alembic \u7684\u5176\u4ed6\u53c2\u6570\uff0c\u5426\u5219\u591a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4f1a\u65e0\u6cd5\u8bc6\u522b\u3002</p> <p>\u4e3a\u4e86\u5c06 <code>src/example_blog/migration</code> \u6253\u5305\u5230\u9879\u76ee\u4e2d\uff0c\u9700\u8981\u5c06\u5176\u53d8\u6210 Python \u5305\u3002</p> <p>\u521b\u5efa <code>src/example_blog/migration/__init__.py</code> \u548c <code>src/example_blog/migration/versions/__init__.py</code></p> <p>\u521b\u5efa\u7a7a\u767d\u6570\u636e\u5e93\u8fc1\u79fb\u7248\u672c\uff1a</p> <pre><code>example_blog migrate -- revision -m \"init\"\n</code></pre> <p>\u6267\u884c\u8fc1\u79fb\uff1a</p> <pre><code>example_blog migrate -- upgrade head\n</code></pre> <p>\u521b\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\u7248\u672c\uff1a</p> <pre><code>example_blog migrate -- revision --autogenerate -m \"init_table\"\n</code></pre> <p>\u6267\u884c\u8fc1\u79fb\uff1a</p> <pre><code>example_blog migrate -- upgrade head\n</code></pre> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"Add alembic migrate.\"\n</code></pre>"},{"location":"web/#4","title":"4. \u6d4b\u8bd5\u548c\u4f18\u5316\u4ee3\u7801","text":"<p>\u6d4b\u8bd5\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u91cd\u8981\u7684\u4e00\u73af\uff0c\u80fd\u591f\u5728\u53d1\u5e03\u4e4b\u524d\u68c0\u67e5\u51fa\u66f4\u591a\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\u60c5\u51b5\u3002</p> <p>\u6d4b\u8bd5\u6846\u67b6\u9009\u7528\u6bd4\u8f83\u5e38\u7528\u7684 pytest \uff0c\u5b83\u5177\u6709\u5f3a\u5927\u7684\u529f\u80fd\u548c\u5f88\u597d\u7684\u517c\u5bb9\u6027\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add -D pytest\n</code></pre> <p>\u521b\u5efa <code>tests/settings.yml</code> \uff0c\u521d\u59cb\u5316\u6d4b\u8bd5\u914d\u7f6e\uff1a</p> <pre><code>DEBUG: false\nLOG_LEVEL: INFO\n\nHOST: 127.0.0.1\nPORT: 8000\n\nDATABASE:\n  DRIVER: mysql\n  NAME: example_blog\n  HOST: 127.0.0.1\n  PORT: 3306\n  USERNAME: root\n  PASSWORD: root\n  QUERY:\n    charset: utf8mb4\n</code></pre> <p>\u7f16\u8f91 <code>tests/__init__.py</code> \uff0c\u52a0\u8f7d\u6d4b\u8bd5\u914d\u7f6e\uff1a</p> <pre><code>import os\n\nfrom example_blog.config import settings\n\nsettings.load_file(os.path.join(os.path.dirname(__file__), 'settings.yml'))\nsettings.load_file(os.path.join(os.path.dirname(__file__), 'settings.local.yml'))\n\n</code></pre> <p>\u867d\u7136\u672c\u5730\u5f00\u53d1\u914d\u7f6e\u53ef\u4ee5\u4e34\u65f6\u8c03\u6574\uff0c\u4f46\u5bf9\u4e8e\u5f00\u53d1\u73af\u5883\u548c\u6d4b\u8bd5\u73af\u5883\u4f9d\u7136\u6709\u4e9b\u4e0d\u4e00\u6837\u3002\u4ece\u4e0a\u9762\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u5230\u52a0\u8f7d\u4e86\u4e24\u4e2a\u6d4b\u8bd5\u914d\u7f6e\uff0c\u548c Dynaconf \u89c4\u5219\u4e00\u6837\uff0c <code>settings.local.yml</code> \u914d\u7f6e\u4e3a\u672c\u5730\u914d\u7f6e\uff0c\u4e0d\u4f1a\u88ab\u4ee3\u7801\u8ffd\u8e2a\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u662f\u624b\u52a8\u5b9e\u73b0\u7684\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"test: Init test.\"\n</code></pre>"},{"location":"web/#41","title":"4.1 \u6d4b\u8bd5\u6570\u636e\u8bbf\u95ee\u5c42","text":"<p>\u7f16\u5199\u6d4b\u8bd5\u914d\u7f6e\uff1a</p> <p>\u65b0\u5efa <code>tests/conftest.py</code> \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a</p> <pre><code>\"\"\"Test config\"\"\"\n\nimport os\nfrom pathlib import Path\n\nimport pytest\nfrom alembic import command, config\n\nfrom sqlalchemy.orm import Session\n\nfrom example_blog import migration\nfrom example_blog.config import settings\nfrom example_blog.db import SessionFactory\nfrom example_blog.models import Article\n\n\n@pytest.fixture()\ndef migrate():\n    \"\"\"Re-init database when run a test.\"\"\"\n    os.chdir(Path(migration.__file__).parent)\n    alembic_config = config.Config('./alembic.ini')\n    alembic_config.set_main_option('script_location', os.getcwd())\n    print('\\n----- RUN ALEMBIC MIGRATION: -----\\n')\n    command.downgrade(alembic_config, 'base')\n    command.upgrade(alembic_config, 'head')\n    try:\n        yield\n    finally:\n        command.downgrade(alembic_config, 'base')\n        db_name = settings.DATABASE.get('NAME')\n        if settings.DATABASE.DRIVER == 'sqlite' and os.path.isfile(db_name):\n            try:\n                os.remove(db_name)\n            except FileNotFoundError:\n                pass\n\n\n@pytest.fixture()\ndef session(migrate) -&gt; Session:\n    \"\"\"session fixture\"\"\"\n    _s = SessionFactory()\n    yield _s\n    _s.close()\n\n\n@pytest.fixture()\ndef init_article(session):\n    \"\"\"Init article\"\"\"\n    a_1 = Article(title='Hello world', body='Hello world, can you see me?')\n    a_2 = Article(title='Love baby', body='I love you everyday, and i want with you.')\n    a_3 = Article(title='Tomorrow', body='When the sun rises, this day is fine day, cheer up.')\n    session.add_all([a_1, a_2, a_3])\n    session.commit()\n\n</code></pre> <p>\u7f16\u5199\u6570\u636e\u8bbf\u95ee\u5c42\u7528\u4f8b\uff1a</p> <pre><code>import pytest\n\nfrom example_blog.dao import ArticleDAO\nfrom example_blog.models import Article\nfrom example_blog.schemas import CreateArticleSchema, UpdateArticleSchema\n\n\nclass TestArticle:\n\n    @pytest.fixture()\n    def dao(self, init_article):\n        yield ArticleDAO()\n\n    def test_get(self, dao, session):\n        users = dao.get(session)\n        assert len(users) == 3\n        users = dao.get(session, limit=2)\n        assert len(users) == 2\n        users = dao.get(session, offset=4)\n        assert not users\n\n    def test_get_by_id(self, dao, session):\n        user = dao.get_by_id(session, 1)\n        assert user.id == 1\n\n    def test_create(self, dao, session):\n        origin_count = session.query(dao.model).count()\n        obj_in = CreateArticleSchema(title='test')\n        dao.create(session, obj_in)\n        count = session.query(dao.model).count()\n        assert origin_count + 1 == count\n\n    def test_patch(self, dao, session):\n        obj: Article = session.query(dao.model).first()\n        body = obj.body\n        obj_in = UpdateArticleSchema(body='test')\n        updated_obj: Article = dao.patch(session, obj.id, obj_in)\n        assert body != updated_obj.body\n\n    def test_delete(self, dao, session):\n        origin_count = session.query(dao.model).count()\n        dao.delete(session, 1)\n        count = session.query(dao.model).count()\n        assert origin_count - 1 == count\n\n    def test_count(self, dao, session):\n        count = dao.count(session)\n        assert count == 3\n\n</code></pre> <p>\u8fd0\u884c\u6d4b\u8bd5\uff1a</p> <pre><code>pytest tests/test_dao.py\n</code></pre> <p>\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"test: Add dao test.\"\n</code></pre>"},{"location":"web/#42","title":"4.2 \u6d4b\u8bd5\u670d\u52a1\u5c42","text":"<p>\u521b\u5efa <code>tests/test_services.py</code> \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a</p> <pre><code>import pytest\n\nfrom example_blog.schemas import CreateArticleSchema, UpdateArticleSchema\nfrom example_blog.services import ArticleService\n\n\nclass TestArticleService:\n\n    @pytest.fixture()\n    def service(self, init_article):\n        yield ArticleService()\n\n    def test_get(self, service, session):\n        objs = service.get(session)\n        assert len(objs) == 3\n        objs = service.get(session, limit=2)\n        assert len(objs) == 2\n        objs = service.get(session, offset=5)\n        assert not objs\n\n    def test_total(self, service, session):\n        total = service.total(session)\n        assert total == 3\n\n    def test_by_id(self, service, session):\n        __obj = session.query(service.dao.model).first()\n        obj = service.get_by_id(session, __obj.id)\n        assert obj.id == __obj.id\n\n    def test_create(self, service, session):\n        origin_count = service.total(session)\n        obj_in = CreateArticleSchema(title='test')\n        service.create(session, obj_in)\n        count = service.total(session)\n        assert origin_count + 1 == count\n\n    def test_patch(self, service, session):\n        origin_obj = session.query(service.dao.model).first()\n        body = origin_obj.body\n        obj_in = UpdateArticleSchema(body='test')\n        obj = service.patch(session, origin_obj.id, obj_in)\n        assert body != obj.body\n\n    def test_delete(self, service, session):\n        origin_count = service.total(session)\n        obj = session.query(service.dao.model).first()\n        service.delete(session, obj.id)\n        count = service.total(session)\n        assert origin_count - 1 == count\n\n</code></pre> <p>\u8fd0\u884c\u6d4b\u8bd5\uff1a</p> <pre><code>pytest tests/test_services.py\n</code></pre> <p>\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"test: Add service test.\"\n</code></pre>"},{"location":"web/#43","title":"4.3 \u6d4b\u8bd5\u8bd5\u56fe\u5c42","text":"<p>\u7f16\u8f91 <code>tests/conftest.py</code> \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a</p> <pre><code>from fastapi.testclient import TestClient\n\nfrom example_blog import migration, server\n\n\n\n@pytest.fixture\ndef client():\n    \"\"\"Fast api test client factory\"\"\"\n    _s = server.Server()\n    _s.init_app()\n    _c = TestClient(app=_s.app)\n    yield _c\n\n</code></pre> <p>\u7531\u4e8e Fastapi \u7684 <code>TestClient</code> \u4f9d\u8d56 <code>requests</code> \uff0c\u6240\u4ee5\u9700\u8981\u5148\u5b89\u88c5\uff1a</p> <pre><code>poetry add -D requests\n</code></pre> <p>\u521b\u5efa <code>tests/test_views.py</code> \uff0c\u6d4b\u8bd5\u8bd5\u56fe\uff1a</p> <pre><code>import pytest\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import Response\n\nfrom example_blog.models import Article\nfrom example_blog.schemas import ModelType\n\n\ndef test_docs(client):\n    \"\"\"Test view\"\"\"\n    response = client.get('/docs')\n    assert response.status_code == 200\n\n\nclass BaseTest:\n    version = 'v1'\n    base_url: str\n    model: ModelType\n\n    @pytest.fixture()\n    def init_data(self):\n        pass\n\n    def url(self, pk: int = None) -&gt; str:\n        url_split = ['api', self.version, self.base_url]\n        if pk:\n            url_split.append(str(pk))\n        return '/'.join(url_split)\n\n    def assert_response_ok(self, response: Response):\n        assert response.status_code == 200\n\n    def test_get(self, client, session, init_data):\n        count = session.query(self.model).count()\n        response = client.get(self.url())\n        self.assert_response_ok(response)\n        assert count == len(response.json())\n\n    def test_get_by_id(self, client, session, init_data):\n        obj = session.query(self.model).first()\n        response = client.get(self.url(obj.id))\n        self.assert_response_ok(response)\n        assert jsonable_encoder(obj) == response.json()\n\n    def test_delete(self, client, session, init_data):\n        count = session.query(self.model).count()\n        session.close()\n        response = client.delete(self.url(1))\n        self.assert_response_ok(response)\n        after_count = session.query(self.model).count()\n        assert after_count == 2\n        assert count - 1 == after_count\n\n\nclass TestArticle(BaseTest):\n    model = Article\n    base_url = 'articles'\n\n    @pytest.fixture()\n    def init_data(self, init_article):\n        pass\n\n    def test_create(self, client, session, init_data):\n        response = client.post(\n            self.url(),\n            json={'title': 'xxx'}\n        )\n        self.assert_response_ok(response)\n        assert response.json().get('title') == 'xxx'\n\n    def test_patch(self, client, session, init_data):\n        obj = session.query(Article).first()\n        response = client.patch(self.url(obj.id), json={'body': 'xxx'})\n        self.assert_response_ok(response)\n        assert response.json().get('body') != obj.body\n\n</code></pre> <p>\u8fd0\u884c\u6d4b\u8bd5\uff1a</p> <pre><code>pytest tests/test_views.py\n</code></pre> <p>\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"test: Add view test.\"\n</code></pre>"},{"location":"web/#44","title":"4.4 \u6d4b\u8bd5\u547d\u4ee4\u884c","text":"<p>\u7f16\u8f91 <code>tests/conftest.py</code> \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a</p> <pre><code>from click.testing import CliRunner\n\n\n@pytest.fixture\ndef cli():\n    runner = CliRunner(echo_stdin=True, mix_stderr=False)\n    yield runner\n\n</code></pre> <p>\u521b\u5efa <code>tests/test_cmdline.py</code> \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a</p> <pre><code>import uvicorn\nfrom alembic import config\n\nimport example_blog\nfrom example_blog import cmdline\n\n\ndef test_main(cli):\n    result = cli.invoke(cmdline.main)\n    assert result.exit_code == 0\n    result = cli.invoke(cmdline.main, '-V')\n    assert result.exit_code == 0\n    assert str(result.output).strip() == example_blog.__version__\n\n\ndef test_run(cli, mocker):\n    mock_run = mocker.patch.object(uvicorn, 'run')\n    result = cli.invoke(cmdline.main, ['server', '-h', '127.0.0.1', '-p', '8080'])\n    assert result.exit_code == 0\n    mock_run.assert_called_once_with(app=mocker.ANY, host='127.0.0.1', port=8080)\n\n\ndef test_migrate(cli, mocker):\n    mock_main = mocker.patch.object(config, 'main')\n    cli.invoke(cmdline.main, ['migrate', '--help'])\n    mock_main.assert_called_once()\n\n</code></pre> <p>\u56e0\u4e3a\u5355\u5143\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u4e86 mock \uff0c\u6240\u4ee5\u5b89\u88c5\u914d\u5408 pytest \u4f7f\u7528\u7684 pytest-mock</p> <pre><code>poetry add -D pytest-mock\n</code></pre> <p>\u8fd0\u884c\u6d4b\u8bd5\uff1a</p> <pre><code>pytest tests/test_views.py\n</code></pre> <p>\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"test: Add cmdline test.\"\n</code></pre>"},{"location":"web/#45","title":"4.5 \u5176\u4ed6\u6d4b\u8bd5","text":"<p>\u521b\u5efa <code>tests/test_dependencies.py</code> \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a</p> <pre><code>import pytest\n\nfrom example_blog.dependencies import CommonQueryParams\n\n\n@pytest.mark.parametrize(\n    ['args', 'expect_value'],\n    [\n        ((), (0, 10)),\n        ((0,), (0, 10)),\n        ((-10, -10), (0, 10)),\n        ((5, 100), (4, 100)),\n    ]\n)\ndef test_common_query_params(args, expect_value):\n    params = CommonQueryParams(*args)\n    assert params.offset == expect_value[0]\n    assert params.limit == expect_value[1]\n\n</code></pre> <p>\u521b\u5efa <code>tests/test_utils.py</code> \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a</p> <pre><code>import os\n\nfrom example_blog.utils import chdir\n\n\ndef test_chdir():\n    path = '/tmp'\n    cwd = os.getcwd()\n    with chdir(path):\n        assert path == os.getcwd()\n    assert cwd == os.getcwd()\n\n</code></pre> <p>\u8fd0\u884c\u6d4b\u8bd5\uff1a</p> <pre><code>pytest\n</code></pre> <p>\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"test: Add other test.\"\n</code></pre> <p>\u81f3\u6b64\uff0c\u6240\u6709\u6d4b\u8bd5\u8fd0\u884c\u5b8c\u6bd5\uff0c\u9664\u4e86 <code>src/example_blog/migration</code> \u4e4b\u5916\u7684\u5305\u7684\u6d4b\u8bd5\u5df2\u7ecf\u53ef\u4ee5\u5168\u90e8\u8986\u76d6\u3002</p>"},{"location":"web/#46","title":"4.6 \u4f18\u5316\u4ee3\u7801","text":"<p>\u4ee3\u7801\u98ce\u683c\u548c\u4ee3\u7801\u89c4\u8303\u662f\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u5f00\u53d1\u4fee\u517b\u7684\u4f53\u73b0\uff0c\u597d\u7684\u4ee3\u7801\u80fd\u591f\u8ba9\u4eba\u773c\u524d\u4e00\u4eae\u3002\u4e3a\u4e86\u89c4\u8303\uff0c\u793e\u533a\u5f00\u53d1\u8bb8\u591a\u5de5\u5177\u7528\u4e8e\u68c0\u6d4b\u4ee3\u7801\u3002</p>"},{"location":"web/#461","title":"4.6.1 \u4f18\u5316\u5bfc\u5165","text":"<p>isort \u662f\u4e00\u4e2a\u81ea\u52a8\u683c\u5f0f\u5316\u5bfc\u5165\u7684\u5de5\u5177\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add -D isort\n</code></pre> <p>\u683c\u5f0f\u5316\u4ee3\u7801\uff1a</p> <pre><code>isort .\n</code></pre> <p>\u6b64\u65f6\u53ef\u4ee5\u4e0d\u7528\u5148\u6025\u7740\u63d0\u4ea4\uff0c\u5728\u540e\u9762\u5bf9\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b\u7684\u65f6\u5019\u53ef\u80fd\u8fd8\u4f1a\u518d\u6b21\u683c\u5f0f\u5316\u4ee3\u7801\u3002</p>"},{"location":"web/#462","title":"4.6.2 \u4f18\u5316\u4ee3\u7801\u98ce\u683c","text":"<p>flake8 \u662f\u4e00\u4e2a\u9075\u5faa PEP8 \u89c4\u8303\u68c0\u6d4b\u4ee3\u7801\u7684\u5de5\u5177\u3002\u4f7f\u7528\u8be5\u5de5\u5177\uff0c\u53ef\u4ee5\u68c0\u6d4b\u51fa\u54ea\u4e9b\u4ee3\u7801\u4e0d\u7b26\u5408 PEP8 \u89c4\u8303\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>poetry add -D flake8\n</code></pre> <p>\u68c0\u6d4b\u4ee3\u7801\uff1a</p> <pre><code>flake8\n</code></pre> <p>\u6839\u636e\u8f93\u51fa\u63d0\u793a\uff0c\u53c2\u7167 flake8 \u89c4\u5219 \u8fdb\u884c\u8c03\u6574\uff0c\u76f4\u81f3\u5b8c\u5168\u7b26\u5408\u4e3a\u6b62\u3002</p> <p>\u63d0\u4ea4\u4ee3\u7801\uff1a</p> <pre><code>git add .\ngit commit -m \"feat: Lint code\"\n</code></pre>"},{"location":"web/#5","title":"5. \u6253\u5305\u53d1\u5e03","text":"<p>\u5230\u8fd9\u4e00\u6b65\uff0c <code>pyproject.toml</code> \u6587\u4ef6\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>[tool.poetry]\nname = \"example_blog\"\nversion = \"0.1.0\"\ndescription = \"This is example blog system.\"\nauthors = [\"huagang &lt;huagang517@126.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\nfastapi-sa = \"^0.0.1.dev0\"\nsqlalchemy = \"^1.4.44\"\nmysqlclient = \"^2.1.1\"\npydantic = \"^1.10.2\"\ndynaconf = \"^3.1.11\"\nfastapi = \"^0.88.0\"\nuvicorn = \"^0.20.0\"\nalembic = \"^1.8.1\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.2.0\"\nisort = \"^5.10.1\"\nrequests = \"^2.28.1\"\npytest-mock = \"^3.10.0\"\nflake8 = \"^6.0.0\"\n\n[tool.poetry.scripts]\nexample_blog = \"example_blog.cmdline:main\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> <p>\u5728\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u662f\u9010\u6b65\u4e30\u5bcc\u6b64\u6587\u4ef6\u7684\u3002\u8fd9\u662f\u9879\u76ee\u7684\u63cf\u8ff0\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86\u6253\u5305\u7684\u914d\u7f6e\u4fe1\u606f\u3002</p>"},{"location":"web/#51","title":"5.1 \u6253\u5305","text":"<pre><code>poetry build\n</code></pre> <p>\u5728 <code>dist</code> \u76ee\u5f55\u4e2d\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f <code>.tar.gz</code> \u7684\u6e90\u7801\u6253\u5305\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f <code>.whl</code> \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002</p>"},{"location":"web/#52","title":"5.2 \u53d1\u5e03","text":"<p>\u5c06\u5f00\u53d1\u597d\u7684\u9879\u76ee\u53d1\u5e03\u5230\u7d22\u5f15\u4ed3\u5e93\uff0c\u6216\u5185\u7f51\u7684\u79c1\u6709\u4ed3\u5e93\u3002</p> <p>\u4f7f\u7528 poetry \u4e0a\u4f20\uff1a</p> <pre><code>poetry publish\n</code></pre> <p>[^2]: \u73b0\u5728 Anaconda / Miniconda \u5728 Windows \u4e0a\u4f7f\u7528\u865a\u62df\u73af\u5883\u5de5\u5177 Virtualenv \u5b58\u5728\u4e00\u4e9b\u517c\u5bb9\u95ee\u9898\uff0c\u800c\u4e14 Pipenv \u662f\u4f9d\u8d56\u8fd9\u4e2a\u5de5\u5177\u7684\u3002\u8bf7\u53c2\u8003 conda support - Windows 3.7+ #1986 \u548c virtualenv==20.0.34 not compatible with python on windows #12094</p>"}]}