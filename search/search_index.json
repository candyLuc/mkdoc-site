{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"quick_start/","title":"\u5feb\u901f\u4e0a\u624b","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b\u7684\u5f00\u53d1\u6307\u5357\uff0c\u672c\u6587\u901a\u8fc7\u4e00\u4e2a\u5305\u542b\u4e3b\u8981\u77e5\u8bc6\u70b9\u7684\u7b80\u5355\u9879\u76ee\uff0c\u5411\u5f00\u53d1\u8005\u5c55\u793a\u4e00\u4e2a\u66f4\u7b26\u5408 Python \u89c4\u8303\u548c\u98ce\u683c\uff08Pythonic\uff09\u7684\u9879\u76ee\u5f00\u53d1\u6d41\u7a0b\u3002</p> <p>\u793a\u4f8b\u9879\u76ee\u662f\u4e00\u4e2a\u5355\u8bcd\u7edf\u8ba1\u7684\u6f14\u793a\u7a0b\u5e8f\uff0c\u5982\u679c\u4f60\u60f3\u67e5\u770b\u5b8c\u6574\u793a\u4f8b\uff0c\u53ef\u4ee5\u6d4f\u89c8 Word Count \u9879\u76ee\u6e90\u7801\u3002</p>"},{"location":"quick_start/#1","title":"1. \u5f00\u53d1\u73af\u5883\u642d\u5efa","text":""},{"location":"quick_start/#11-python","title":"1.1 Python \u5f00\u53d1\u73af\u5883","text":"<p>\u672c\u9879\u76ee\u4f7f\u7528 Python 3.10 \u3002\u5177\u4f53\u7248\u672c\u7684 Python \u73af\u5883\u53ef\u4ee5\u5728\u5b98\u7f51\u4e0b\u8f7d\u3002</p>"},{"location":"quick_start/#12","title":"1.2 \u5f00\u53d1\u5de5\u5177","text":"<p>\u63a8\u8350\u4f7f\u7528 Pycharm \u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u9009\u62e9\u514d\u8d39\u7684\u793e\u533a\u7248\u672c\u3002</p> <p>Visual Studio Code \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u514d\u8d39\u8f7b\u91cf\u7ea7\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u5b89\u88c5\u63d2\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6210\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684 IDE \u5f00\u53d1\u5de5\u5177\u3002\u76ee\u524d\u652f\u6301 Python \u7684\u63d2\u4ef6\u4f53\u7cfb\u5df2\u7ecf\u8f83\u4e3a\u5b8c\u5584\uff0c\u6b64\u65b9\u6848\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5907\u7528\u3002</p>"},{"location":"quick_start/#13","title":"1.3 \u865a\u62df\u73af\u5883\u5de5\u5177","text":"<p>\u63a8\u8350\u4f7f\u7528 Poetry \uff0c\u65e2\u5305\u542b\u4e86\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u4e5f\u652f\u6301\u6253\u5305\u53d1\u5e03\u7b49\u529f\u80fd\u3002</p> <p>\u5728\u5b89\u88c5\u597d Python \u73af\u5883\u540e\uff0c\u5e94\u8be5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u5b89\u88c5 Poetry \u3002</p> <pre><code>sudo python -m pip install -U pip\nsudo pip install -U poetry\n</code></pre>"},{"location":"quick_start/#14","title":"1.4 \u521d\u59cb\u5316\u9879\u76ee","text":"<p>cookiecutter \u662f\u4e00\u4e2a\u901a\u8fc7\u9879\u76ee\u6a21\u677f\u521b\u5efa\u9879\u76ee\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002</p> <p>\u5b89\u88c5 cookiecutter</p> <pre><code>sudo pip3 install -U cookiecutter\n</code></pre> <p>\u521d\u59cb\u5316\u9879\u76ee</p> <pre><code>cd workspace\ncookiecutter https://github.com/pyloong/cookiecutter-pythonic-project\n</code></pre> <p>\u8fd0\u884c\u547d\u4ee4\u540e\u4f1a\u51fa\u73b0\u4e0b\u9762\u7684\u914d\u7f6e\u8fc7\u7a0b\uff0c\u5982\u679c\u4f60\u4e0d\u6e05\u695a\u914d\u7f6e\u7684\u5177\u4f53\u7528\u9014\uff0c\u53ef\u4ee5\u76f4\u63a5\u6309\u56de\u8f66\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\uff0c\u9ed8\u8ba4\u914d\u7f6e\u4f7f\u7528\u9879\u76ee\u6a21\u677f\u521d\u59cb\u503c\u3002</p> <pre><code>\u276f cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project\nproject_name [My Project]: Word Count\nproject_slug [word_count]: \nproject_description [My Awesome Project!]: Word Count Project.\nauthor_name [Author]: test\nauthor_email [author@example.com]: test@example.com\nversion [0.1.0]: \nSelect python_version:\n1 - 3.10\n2 - 3.11\nChoose from 1, 2 [1]: \nuse_src_layout [y]: \nuse_poetry [y]: \nuse_docker [n]: \nSelect ci_tools:\n1 - none\n2 - Gitlab\n3 - Github\nChoose from 1, 2, 3 [1]: \ninit_skeleton [n]:\n\n</code></pre> <p>\u5982\u679c\u4f60\u5728\u4f7f\u7528\u9879\u76ee\u6a21\u677f\u8fc7\u7a0b\u4e2d\u6709\u4efb\u4f55\u95ee\u9898\u6216\u7591\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7\u53d1\u8d77 issues \u8fdb\u884c\u53cd\u9988\u3002</p> <p>\u751f\u6210\u540e\u7684\u9879\u76ee\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>word_count\n\u251c\u2500\u2500 .editorconfig\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 development.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 word_count\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_version.py\n\u2514\u2500\u2500 tox.ini\n\n5 directories, 13 files\n</code></pre> <p>\u751f\u6210\u9879\u76ee\u7684 <code>src</code> \u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a\u9879\u76ee\u6a21\u5757\uff0c\u7528\u6765\u5b58\u653e\u9879\u76ee\u6e90\u4ee3\u7801\uff0c <code>tests</code> \u76ee\u5f55\u7528\u6765\u7f16\u5199\u6a21\u5757\u7684\u76f8\u5173\u6d4b\u8bd5\u4ee3\u7801\u3002</p> <p><code>pyproject.toml</code> \u5305\u542b\u9879\u76ee\u521d\u59cb\u4f9d\u8d56\uff0c\u548c\u9879\u76ee\u7684\u63cf\u8ff0\u4fe1\u606f\uff0c<code>tox.ini</code> \u5b9a\u4e49\u4e86\u4efb\u52a1\u81ea\u52a8\u5316\u6267\u884c\u903b\u8f91\u3002</p>"},{"location":"quick_start/#15","title":"1.5 \u521d\u59cb\u5316\u9879\u76ee\u73af\u5883","text":"<p>\u4f7f\u7528 poetry \u521d\u59cb\u5316\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002</p> <pre><code>cd word_count\npoetry install -v\n</code></pre> <p>\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a <code>poetry.lock</code>\uff0c\u53ef\u4ee5\u7528\u6765\u9501\u5b9a\u751f\u4ea7\u73af\u5883\u5b89\u88c5\u5305\u7684\u7248\u672c\u548c\u4f9d\u8d56\u4fe1\u606f\u3002</p>"},{"location":"quick_start/#16-git","title":"1.6 \u521d\u59cb\u5316 Git","text":"<p>\u63a8\u8350\u4f7f\u7528 Git \u5bf9\u9879\u76ee\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3002\u6240\u4ee5\u9700\u8981\u63d0\u524d\u5b89\u88c5 Git \uff0c\u5e76\u719f\u6089\u5e38\u7528\u7684 Git \u6982\u5ff5\u548c Git \u547d\u4ee4\u3002</p> <pre><code>git init\ngit config user.name test\ngit config user.email test@example.com\n\n# \u521d\u59cb\u5316\u9879\u76ee\u63d0\u4ea4\ngit add .\ngit commit -m \"feat: \u521d\u59cb\u5316\u9879\u76ee\u63d0\u4ea4\"\n</code></pre>"},{"location":"quick_start/#17","title":"1.7 \u4f1a\u7528\u5230\u7684\u5176\u4ed6\u5de5\u5177","text":"<p>\u5728\u751f\u6210\u7684 <code>pyproject.toml</code> \u6587\u4ef6\u4e2d\uff0c\u9ed8\u8ba4\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5f00\u53d1\u73af\u5883\u4e2d\u5e38\u7528\u7684\u5de5\u5177\u3002</p> <ul> <li><code>isort</code>: isort \u662f\u4e00\u4e2a\u81ea\u52a8\u683c\u5f0f\u5316\u5bfc\u5165\u5de5\u5177</li> <li><code>pylint</code>: pylint \u662f\u4e00\u4e2a\u68c0\u6d4b\u4ee3\u7801\u98ce\u683c\u5de5\u5177</li> <li><code>pytest</code>: pytest \u662f\u4e00\u4e2a\u66f4\u52a0\u6613\u7528\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u517c\u5bb9 <code>unittest</code> \u6d4b\u8bd5\u6846\u67b6</li> <li><code>pytest-cov</code>: pytest-cov \u662f <code>pytest</code> \u7684 Coverage \u63d2\u4ef6\uff0c\u7528\u6765\u7edf\u8ba1\u6d4b\u8bd5\u8986\u76d6\u7387</li> <li><code>mkdocs</code>: mkdocs \u662f\u4e00\u4e2a\u9879\u76ee\u6587\u6863\u6784\u5efa\u5de5\u5177\uff0c\u4f7f\u7528 markdown \u7f16\u5199\u5185\u5bb9\uff0c\u6784\u5efa\u751f\u6210\u6587\u6863\u9875\u9762\u3002</li> <li><code>mkdocs-material</code>: mkdocs-material \u662f\u57fa\u4e8e mkdocs \u6784\u5efa\u6587\u6863\uff0c\u5e76\u63d0\u4f9b\u73b0\u4ee3\u5316\u4e3b\u9898\u7684\u5e93\u3002</li> <li><code>tox</code>: tox \u662f\u4e00\u4e2a\u4efb\u52a1\u81ea\u52a8\u5316\u5de5\u5177</li> </ul> <p>\u5982\u679c\u60f3\u8981\u4e86\u89e3\u76f8\u5173\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u9605\u8bfb\u5bf9\u5e94\u7684\u6280\u672f\u8bf4\u660e\u6587\u6863\u3002</p>"},{"location":"quick_start/#2","title":"2. \u529f\u80fd\u5f00\u53d1","text":"<p>\u9996\u5148\u5c06\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff1a</p> <pre><code>poetry install\n</code></pre> <p>\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5c06 <code>src</code> \u4e0b\u7684\u5305\u5b89\u88c5\u5230 Python \u73af\u5883\u4e2d\uff0c\u5426\u5219\u65e0\u6cd5\u6b63\u5e38\u5bfc\u5165\u5305\u4e2d\u7684\u6a21\u5757\u3002</p>"},{"location":"quick_start/#21","title":"2.1 \u529f\u80fd\u9700\u6c42","text":"<p>\u63d0\u4f9b\u4e00\u4e2a\u4ece\u6587\u672c\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u6570\u636e\u4ee5\u7a7a\u683c\u5206\u5272\u5355\u8bcd\uff0c\u7136\u540e\u7edf\u8ba1\u6587\u4ef6\u4e2d\u7684\u5355\u8bcd\u6570\u91cf\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u3002</p>"},{"location":"quick_start/#22","title":"2.2 \u7f16\u5199\u8ba1\u6570\u5668","text":"<p>\u5728 <code>src/word_count/</code> \u4e0b\u521b\u5efa <code>counter.py</code> \u6587\u4ef6\uff0c\u540c\u65f6\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>\"\"\"Count a file \"\"\"\nimport logging\nfrom collections.abc import Generator\nfrom pathlib import Path\n\n# Config root logger\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n\ndef count(source_file: str, dest_file: str):\n    \"\"\"\n    Count source\n    :param source_file:\n    :param dest_file:\n    :return:\n    \"\"\"\n    words = read_from_file(Path(source_file))\n\n    total = 0\n\n    for _ in words:\n        total += 1\n\n    write_to_file(Path(dest_file), total)\n\n\ndef read_from_file(source_file: Path) -&gt; Generator[str, None, None]:\n    \"\"\"\n\n    :param source_file:\n    :return:\n    \"\"\"\n    # Read source_file\n    logging.debug('Read file: %s', source_file)\n    with open(source_file, 'r', encoding='utf-8') as source_obj:\n        for line in source_obj:\n            for word in line.split(' '):\n                yield word\n\n\ndef write_to_file(dest_file: Path, total_words: int) -&gt; None:\n    \"\"\"\n    Write result to file\n    :param dest_file:\n    :param total_words:\n    :return:\n    \"\"\"\n    logging.debug('Count %s words, write to %d', dest_file, total_words)\n    with open(dest_file, 'w', encoding='utf-8') as dest_obj:\n        dest_obj.write(f'Total count: {total_words}')\n\n</code></pre>"},{"location":"quick_start/#221","title":"2.2.1 \u5bfc\u5165\u683c\u5f0f\u5316","text":"<p>\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c isort \u5bf9\u5bfc\u5165\u8fdb\u884c\u683c\u5f0f\u5316\u3002</p> <pre><code>isort .\n</code></pre> <p>\u6b64\u64cd\u4f5c\u4f1a\u81ea\u52a8\u4fee\u6539\u4ee3\u7801\uff0c\u5c06\u5bfc\u5165\u7684\u5305\u683c\u5f0f\u5316\u3002\u5982\u679c\u60f3\u67e5\u770b\u533a\u522b\uff0c\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>isort . --check-only --diff\n</code></pre>"},{"location":"quick_start/#222","title":"2.2.2 \u4ee3\u7801\u98ce\u683c\u68c0\u67e5","text":"<p>\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c pylint \u68c0\u67e5\u4ee3\u7801\u662f\u5426\u89c4\u8303\uff0c\u662f\u5426\u7b26\u5408 PEP8 \u6807\u51c6\u3002</p> <pre><code>pylint tests src\n</code></pre> <p>\u6b64\u64cd\u4f5c\u4f1a\u5217\u51fa\u4ee3\u7801\u4e2d\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u90e8\u5206\uff0c\u5e76\u663e\u793a\u5bf9\u5e94\u7684\u89c4\u8303\u540d\u79f0\u3002\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6240\u6709\u89c4\u5219\u3002</p> <p>\u5728\u5b8c\u6210\u4fee\u6539\u540e\u518d\u6b21\u8fd0\u884c\u4e24\u4e2a\u547d\u4ee4\uff0c\u76f4\u5230\u90fd\u6ca1\u6709\u5f02\u5e38\u8f93\u51fa\u4e3a\u6b62\u3002</p>"},{"location":"quick_start/#223","title":"2.2.3 \u6d4b\u8bd5","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Pycharm \u5f00\u53d1\uff0c\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb  <code>File</code> --&gt; <code>Settings</code> --&gt; <code>Tools</code> --&gt; <code>Python Integrated Tools</code> --&gt; <code>Testing</code> --&gt; <code>Default runner</code> \u9009\u62e9\u6d4b\u8bd5\u6846\u67b6\uff0c\u63a8\u8350\u4f7f\u7528 <code>pytest</code>\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528 <code>mock</code> \u9700\u8981\u5b89\u88c5 <code>pytest-mock</code> \u6a21\u5757\uff0c\u53ef\u4ee5\u5728 <code>pytest</code> \u7684 <code>fixture</code> \u7279\u6027\u4e0a\u4f7f\u7528 <code>mock</code>\u3002</p> <p>\u5b89\u88c5\u5f00\u53d1\u73af\u5883\u4f9d\u8d56\uff1a</p> <pre><code>poetry add --group dev pytest-mock\n</code></pre> <p>\u6dfb\u52a0\u6d4b\u8bd5\u914d\u7f6e\uff0c\u5728 <code>tests/conftest.py</code> \u4e2d\u52a0\u5165\uff1a</p> <pre><code>\"\"\"Test config\"\"\"\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\n\nimport pytest\n\n\n@pytest.fixture\ndef mock_path() -&gt; Path:\n    \"\"\"Mock a path, and clean when unit test done.\"\"\"\n    with TemporaryDirectory() as temp_path:\n        yield Path(temp_path)\n\n</code></pre> <p>\u5728 <code>tests/</code> \u4e0b\u6dfb\u52a0\u4e0e <code>src/word_count</code> \u76ee\u5f55\u4e2d\u6587\u4ef6\u540d\u76f8\u540c\u7684\u6587\u4ef6\uff0c\u5e76\u5728\u6587\u4ef6\u540d\u524d\u6dfb\u52a0 <code>test_</code> \u524d\u7f00\u3002</p> <p>\u6dfb\u52a0\u6587\u4ef6 <code>tests/test_counter.py</code>\uff1a</p> <pre><code>\"\"\"Test counter\"\"\"\nfrom pathlib import Path\n\nimport pytest\n\nfrom word_count.counter import count, read_from_file, write_to_file\n\n\n@pytest.fixture(name='mock_source_file')\ndef fixture_mock_source_file(mock_path) -&gt; Path:\n    \"\"\"mock source_file, this file has two words.\"\"\"\n    words = ['hello', ' ', 'words']\n    source_file = mock_path / 'source.txt'\n    with open(source_file, 'w', encoding='utf-8') as obj:\n        obj.write(''.join(words))\n    yield source_file\n\n\ndef test_read_from_file(mock_source_file):\n    \"\"\"Test read_from_file\"\"\"\n    result = read_from_file(mock_source_file)\n    assert sum(1 for _ in result) == 2\n\n\ndef test_write_to_file(mock_path):\n    \"\"\"Test write_to_file\"\"\"\n    dest_file = mock_path / 'dest.txt'\n    write_to_file(dest_file, 100)\n    with open(dest_file, 'r', encoding='utf-8') as obj:\n        txt = obj.read()\n        assert 'Total count: 100' in txt\n\n\ndef test_count(mocker, mock_path, mock_source_file):\n    \"\"\"Test count\"\"\"\n    mock_read_from_file = mocker.patch(\n        'word_count.counter.read_from_file',\n        return_value=list(range(10))\n    )\n    mock_write_to_file = mocker.patch(\n        'word_count.counter.write_to_file'\n    )\n    dest_file = mock_path / 'dest.txt'\n    count(str(mock_source_file), str(dest_file))\n    mock_read_from_file.assert_called_once_with(mock_source_file)\n    mock_write_to_file.assert_called_once_with(dest_file, 10)\n\n</code></pre> <p>\u8fd0\u884c <code>pytest</code> \uff0c\u8ba9\u6d4b\u8bd5\u6b63\u786e\u8fd0\u884c\u3002\u5982\u679c\u6d4b\u8bd5\u7528\u4f8b\u5931\u8d25\uff0c\u9700\u8981\u6839\u636e\u51fa\u9519\u5806\u6808\u627e\u5230\u95ee\u9898\u539f\u56e0\uff0c\u89e3\u51b3\u6389\u540e\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\u547d\u4ee4\uff0c\u76f4\u5230\u4ee3\u7801\u6d4b\u8bd5\u901a\u8fc7\u3002</p> <p>\u7136\u540e\u8fd0\u884c <code>isort</code> \u548c <code>pylint src tests</code> \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002</p>"},{"location":"quick_start/#224","title":"2.2.4 \u63d0\u4ea4\u4ee3\u7801","text":"<p>\u4e00\u4e2a\u529f\u80fd\u7279\u6027\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u9700\u8981\u63d0\u4ea4\u4ee3\u7801\u6765\u4fdd\u5b58\u8bb0\u5f55\uff0c\u907f\u514d\u610f\u5916\u64cd\u4f5c\u3002</p> <pre><code>git add .\ngit commit -m \"feat(counter): \u589e\u52a0 Counter \u903b\u8f91\uff0c\u5e76\u5b8c\u6210\u6d4b\u8bd5\u3002\"\n</code></pre>"},{"location":"quick_start/#23","title":"2.3 \u7f16\u5199\u547d\u4ee4\u884c\u5165\u53e3","text":"<p>\u5728 <code>src/word_count/</code> \u76ee\u5f55\u4e0b\uff0c\u521b\u5efa <code>cmdline.py</code> \u6587\u4ef6\uff0c\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>\"\"\"Cmdline\"\"\"\nimport argparse\nimport sys\n\nfrom word_count.counter import count\n\n\ndef init_args() -&gt; argparse.Namespace:\n    \"\"\"Init argument and parse\"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--source', required=True, help='Source file used for count.')\n    parser.add_argument('-d', '--dest', required=True, help='Dest file used for count result')\n    return parser.parse_args(sys.argv[1:])\n\n\ndef main():\n    \"\"\"Execute\"\"\"\n    args = init_args()\n    count(args.source, args.dest)\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> <p>\u8fd0\u884c <code>isort</code> \u548c <code>pylint</code> \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002</p>"},{"location":"quick_start/#231","title":"2.3.1 \u6d4b\u8bd5","text":"<p>\u521b\u5efa <code>tests/test_cmdline.py</code> \u6587\u4ef6\uff0c\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>\"\"\"Test cmdline\"\"\"\nimport sys\n\nimport pytest\n\nfrom word_count import cmdline\n\n\ndef test_help(mocker, capsys):\n    \"\"\"test help command\"\"\"\n    args = ['word_count', '-h']\n    mocker.patch.object(sys, 'argv', args)\n    with pytest.raises(SystemExit) as ex:\n        cmdline.main()\n\n    assert ex.value.code == 0\n    outerr = capsys.readouterr()\n    assert '-s SOURCE' in outerr.out\n    assert '-d DEST' in outerr.out\n\ndef test_only_pass_source(mocker, capsys):\n    \"\"\"test only pass -s \"\"\"\n    args = ['word_count', '-s', 'foo']\n    mocker.patch.object(sys, 'argv', args)\n    with pytest.raises(SystemExit) as ex:\n        cmdline.main()\n\n    assert ex.value.code == 2\n    outerr = capsys.readouterr()\n    assert 'the following arguments are required: -d' in outerr.err\n\ndef test_only_pass_dest(mocker, capsys):\n    \"\"\"test only pass -d\"\"\"\n    args = ['word_count', '-d', 'foo']\n    mocker.patch.object(sys, 'argv', args)\n    with pytest.raises(SystemExit) as ex:\n        cmdline.main()\n\n    assert ex.value.code == 2\n    outerr = capsys.readouterr()\n    assert 'the following arguments are required: -s' in outerr.err\n\ndef test_main(mocker):\n    \"\"\"test cmdline, and everything is fine.\"\"\"\n    args = ['word_count', '-s', 'foo', '-d', 'bar']\n    mocker.patch.object(sys, 'argv', args)\n    mock_count = mocker.patch('word_count.cmdline.count')\n    cmdline.main()\n    mock_count.assert_called_once()\n\n</code></pre> <p>\u8fd0\u884c <code>pytest</code>\uff0c\u8ba9\u6d4b\u8bd5\u6b63\u786e\u8fd0\u884c\u3002</p> <p>\u8fd0\u884c <code>isort</code> \u548c <code>pylint</code> \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002</p>"},{"location":"quick_start/#232","title":"2.3.2 \u63d0\u4ea4\u4ee3\u7801","text":"<pre><code>git add .\ngit commit -m \"feat(cmdline): \u589e\u52a0 cmdline \u903b\u8f91\uff0c\u5e76\u5b8c\u6210\u6d4b\u8bd5\u3002\"\n</code></pre>"},{"location":"quick_start/#24","title":"2.4 \u603b\u7ed3","text":"<p>\u81f3\u6b64\uff0c\u6211\u4eec\u7684\u529f\u80fd\u5df2\u7ecf\u5f00\u53d1\u5b8c\u6210\u3002\u5728\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u9075\u5faa\u4e86 \u201c\u6dfb\u52a0\u529f\u80fd\u7279\u6027\u201d =&gt; \u201c\u4ee3\u7801\u98ce\u683c\u68c0\u67e5\u201d =&gt; \u201c\u5355\u5143\u6d4b\u8bd5\u201d \u7684\u5f00\u53d1\u6d41\u7a0b\u3002</p> <p>\u5982\u679c\u611f\u89c9\u6bcf\u6b21\u8fd0\u884c\u591a\u4e2a\u547d\u4ee4\u6bd4\u8f83\u7e41\u7410\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e2d\u8fd0\u884c <code>tox</code> \u81ea\u52a8\u5316\u5b8c\u6210\u4ee3\u7801\u6d4b\u8bd5\u3001\u5bfc\u5305\u68c0\u67e5\u548c\u4ee3\u7801\u98ce\u683c\u68c0\u67e5\u3002</p> <pre><code>tox\n</code></pre> <p>\u73b0\u5728\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u5355\u8bcd\u7edf\u8ba1\uff1a</p> <pre><code>python src/word_count/cmdline.py -s LICENSE -d /tmp/res.txt\n</code></pre>"},{"location":"quick_start/#25","title":"2.5 \u6253\u5305\u53d1\u5e03","text":"<p>\u5982\u679c\u5e0c\u671b\u522b\u4eba\u80fd\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u9879\u76ee\uff0c\u53ef\u4ee5\u5c06\u9879\u76ee\u6253\u5305\u53d1\u5e03\u5230 pypi \u4e2d\uff0c\u7136\u540e\u5728\u9700\u8981\u4f7f\u7528\u7684\u5730\u65b9\u8fd0\u884c <code>pip install -U word-count</code>\u3002</p> <p>\u4f46\u662f\u5b89\u88c5\u5230\u73af\u5883\u540e\u53bb\u8fd0\u884c <code>cmdline.py</code> \u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u9700\u8981\u5c06 <code>cmdline.py</code> \u6ce8\u518c\u6210\u53ef\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u4fee\u6539 <code>pyproject.toml</code> \uff0c\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>[tool.poetry.plugins.console_scripts]\nword_count = \"word_count.cmdline:main\"\n</code></pre> <p>\u5f53\u4f7f\u7528 <code>pip</code> \u547d\u4ee4\u5c06\u9879\u76ee\u5305\u5b89\u88c5\u5230\u73af\u5883\u540e\uff0c\u4f1a\u81ea\u52a8\u6ce8\u518c\u4e00\u4e2a <code>word_count</code> \u7684\u53ef\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u518d\u6b21\u5c06\u672c\u5730\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u5f53\u524d Python \u73af\u5883\uff1a</p> <pre><code>poetry install\n</code></pre> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528 <code>word_count</code> \u547d\u4ee4\uff1a</p> <pre><code>$ word_count -h\nusage: word_count [-h] -s SOURCE -d DEST\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SOURCE, --source SOURCE\n                        Source file used for count.\n  -d DEST, --dest DEST  Dest file used for count result\n\n</code></pre>"},{"location":"quick_start/#251","title":"2.5.1 \u6253\u5305","text":"<p>\u8fd0\u884c\u6253\u5305\u547d\u4ee4\uff1a</p> <pre><code>poetry build \n</code></pre> <p><code>sdist</code> \u4f1a\u5c06\u9879\u76ee\u6253\u5305\u6210\u6e90\u7801\u5305\uff0c <code>bdist_wheel</code> \u4f1a\u5c06\u9879\u76ee\u6253\u5305\u6210\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u5305\u3002</p> <p>\u6253\u5305\u540e\u7684\u6587\u4ef6\u5728 <code>dist</code> \u76ee\u5f55\u4e2d\u3002\u53ef\u4ee5\u76f4\u63a5\u5728\u5176\u4ed6\u5730\u65b9\u8fd0\u884c <code>pip install word_count.wheel</code> \u5b89\u88c5\u3002</p>"},{"location":"quick_start/#252","title":"2.5.2 \u53d1\u5e03","text":"<p>\u5c06\u5f00\u53d1\u597d\u7684\u9879\u76ee\u53d1\u5e03\u5230\u7d22\u5f15\u4ed3\u5e93\uff0c\u6216\u5185\u7f51\u7684\u79c1\u6709\u4ed3\u5e93\u3002</p> <pre><code>poetry publish\n</code></pre> <p>\u9ed8\u8ba4\u4f1a\u5c06\u9879\u76ee\u53d1\u5e03\u5230 pypi \u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u6709\u5bf9\u5e94\u7684\u767b\u5f55\u8d26\u53f7\u3002</p>"}]}